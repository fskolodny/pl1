;;;; pl1.lisp

(in-package #:pl1)
(defclass program ()
  ((source :accessor source :initarg :source :type 'string)
   (name-table :accessor external-name-table
               :initform (make-hash-table :test 'equalp))
   (procs :accessor external-procedures :initform nil)
   )
  )
(defun tokenise (string)
  (let ((in-string nil)
        (in-blanks nil)
        (result (make-string 0))
        )
    (iter
      (for c in-sequence string)
      (if (char= c #\')
          (setf in-string (not in-string))
          (if (find c #(#\space #\tab #\newline #\return) :test #'eql)
              (if (not in-blanks)
                  (setf in-blanks t)
                  (next-iteration))
              )
          )
      (collect c result-type string)
      )
    )
  )
(defmethod parse ((self program))
  (let ((transformed-source (tokenise (source self)))
        )
    )
  self
  )
(defmethod make-program ((source string))
  (let ((prog (make-instance 'program :source source))
        )
    (parse prog)
    )
  )
